name: Terragrunt Setup
description: Checks terraform complicance with aws
inputs:
  terragrunt-version:
    description: The terragrunt version to use
    required: false
    default: 'v0.31.1'
  terragrunt-bin-name:
    description: The name of the executable
    required: false
    default: terragrunt
  terragrunt-bin-dir:
    description: The bin location
    required: false
    default: "/usr/local/bin"
  format-ext:
    description: The type of archive
    required: false
    default: linux_amd64
outputs:
  terragrunt-bin-path:
    description: The path of the downloaded terragrunt bin
    value: ${{ steps.tg-setup.outputs.tgpath }}
runs:
  using: composite
  steps:

    - name: Terrgrunt Setup
      shell: bash
      id: tg-setup
      env:
        TERRAGRUNT_VERSION: ${{ inputs.terragrunt-version }}
        TERRAGRUNT_BIN_NAME: ${{ inputs.terragrunt-bin-name }}
      run: |
        [ -z "${{ inputs.terragrunt-bin-dir }}" -o "${{ inputs.terragrunt-bin-dir }}x" = "x" ] && TERRAGRUNT_BIN_DIR=$(realpath "./") || export TERRAGRUNT_BIN_DIR=$(realpath "${{ inputs.terragrunt-bin-dir }}")
        export DOWNLOAD_URL="https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_${{ inputs.format-ext }}"
        tgpath=$(realpath "${TERRAGRUNT_BIN_NAME}")
        printf "Downloading '%s' ...\n" "${DOWNLOAD_URL}"
        curl -f -Lo "${TERRAGRUNT_BIN_NAME}" "${DOWNLOAD_URL}"
        [ -f "${TERRAGRUNT_BIN_NAME}" ] || { printf "Downloaded file '%s' not found. Exiting ...\n" "${TERRAGRUNT_BIN_NAME}" >&2 && exit 1; }
        # TODO
        # Verify checksum of download
        chmod +x "${TERRAGRUNT_BIN_NAME}"
        if [ -n "${{ inputs.terragrunt-bin-dir }}" -a "${{ inputs.terragrunt-bin-dir }}x" != "x" ]; then
          if [ ! -d "${{ inputs.terragrunt-bin-dir }}" ]; then
            printf "Creating directory '%s' ...\n" "${{ inputs.terragrunt-bin-dir }}"
            mkdir -p "${{ inputs.terragrunt-bin-dir }}" || { printf "Unabled to create '%s'. Exiting ...\n" "${{ inputs.terragrunt-bin-dir }}" >&2 && exit 1; }
          fi
          export TERRAGRUNT_BIN_DIR=$(realpath "${{ inputs.terragrunt-bin-dir }}")
          tgpath="${TERRAGRUNT_BIN_DIR}/${TERRAGRUNT_BIN_NAME}"
          if [ "$(realpath ${TERRAGRUNT_BIN_NAME})" != "$tgpath" ]; then
            mv "${TERRAGRUNT_BIN_NAME}" "${TERRAGRUNT_BIN_DIR}/"
            printf "Moving '%s' to '%s' ...\n" "$(realpath ${TERRAGRUNT_BIN_NAME})" "${TERRAGRUNT_BIN_DIR}/${TERRAGRUNT_BIN_NAME}"
          fi
        fi
        [ -f "$tgpath" ] || { printf "Terragrunt path '%s' not found. Exiting ...\n" "${tgpath}" >&2 && exit 1; }
        
        output=$(realpath "$tgpath")
        echo "terragrunt-bin-path: ${output}"
        echo "tgpath=${output}" >> $GITHUB_OUTPUT